package main

import (
	"cmp"
	"fmt"
	"slices"
	"sort"
	"strconv"
	"strings"

	"github.com/golang-collections/collections/stack"
)

type Node struct {
	Points
	next   *Node
	prev   *Node
	active bool
}

type Points struct {
	y int
	x int
}

type r struct {
	this Points
	to   Points
}

// 15x15
// fails
// var raw = "s-0-1,~-0-0,~-1-0,s-0-2,~-1-2,~-1-1,s-0-3,~-1-3,~-1-4,~-1-5,~-1-6,~-1-7,~-1-8,~-1-9,~-1-10,~-1-11,s-0-4,~-0-5,s-0-6,~-0-7,s-0-8,~-0-9,~-0-10,~-0-11,~-0-12,~-1-12,~-1-13,s-0-13,~-0-14,~-1-14,s-2-0,~-2-1,~-2-2,~-2-3,~-2-4,~-3-4,~-3-3,s-4-5,~-3-5,~-2-5,~-2-6,~-3-6,s-2-7,~-3-7,s-6-9,~-5-9,~-4-9,~-3-9,~-2-9,~-2-8,~-3-8,s-2-11,~-2-10,~-3-10,s-3-12,~-2-12,~-2-13,~-2-14,~-3-14,~-4-14,~-5-14,~-6-14,s-3-0,~-3-1,~-3-2,s-3-11,~-4-11,~-5-11,s-3-13,~-4-13,s-4-0,~-5-0,~-6-0,~-7-0,~-8-0,~-9-0,~-9-1,~-8-1,~-7-1,~-7-2,~-7-3,~-7-4,~-7-5,~-7-6,~-7-7,~-7-8,~-7-9,~-7-10,~-6-10,~-5-10,~-4-10,s-6-1,~-5-1,~-4-1,~-4-2,~-5-2,~-6-2,~-6-3,~-5-3,~-4-3,~-4-4,s-6-8,~-6-7,~-5-7,~-4-7,~-4-6,s-5-8,~-4-8,s-4-12,~-5-12,~-6-12,s-6-4,~-5-4,s-6-5,~-5-5,~-5-6,~-6-6,s-5-13,~-6-13,~-7-13,~-8-13,~-8-12,~-7-12,~-7-11,~-6-11,s-7-14,~-8-14,s-8-7,~-8-6,~-8-5,~-8-4,~-8-3,~-8-2,s-8-8,~-8-9,~-8-10,~-8-11,~-9-11,~-9-10,~-9-9,~-9-8,~-9-7,~-9-6,~-9-5,~-9-4,~-10-4,~-10-5,~-10-6,~-10-7,~-10-8,s-10-3,~-10-2,~-9-2,~-9-3,s-9-12,~-9-13,s-13-14,~-12-14,~-11-14,~-10-14,~-9-14,s-10-9,~-10-10,~-10-11,~-10-12,~-11-12,~-11-11,~-11-10,~-11-9,~-11-8,~-11-7,~-11-6,~-11-5,~-11-4,~-11-3,~-11-2,~-11-1,~-11-0,~-10-0,~-10-1,s-11-13,~-10-13,s-14-0,~-13-0,~-12-0,s-14-14,~-14-13,~-14-12,~-14-11,~-14-10,~-14-9,~-14-8,~-14-7,~-14-6,~-14-5,~-14-4,~-14-3,~-14-2,~-14-1,~-13-1,~-12-1,~-12-2,~-12-3,~-12-4,~-12-5,~-12-6,~-12-7,~-12-8,~-12-9,~-12-10,~-12-11,s-13-2,~-13-3,~-13-4,~-13-5,~-13-6,~-13-7,~-13-8,~-13-9,~-13-10,~-13-11,~-13-12,~-13-13,~-12-13,~-12-12;9,7,8,6,7,8,8,6,7,8,7,7,10,6,8;5,8,3,3,5,8,13,5,7,9,5,13,6,8,14"
// var raw = "s-0-0,~-1-0,~-1-1,s-0-1,~-0-2,~-0-3,~-0-4,s-0-5,~-0-6,s-0-7,~-0-8,~-0-9,s-0-10,~-0-11,~-0-12,~-1-12,~-2-12,s-0-14,~-0-13,s-1-2,~-1-3,~-1-4,~-1-5,~-1-6,~-1-7,~-1-8,~-1-9,~-1-10,~-1-11,~-2-11,s-2-13,~-1-13,~-1-14,~-2-14,s-2-0,~-3-0,s-6-1,~-5-1,~-4-1,~-3-1,~-2-1,~-2-2,s-2-5,~-2-4,~-2-3,s-2-6,~-2-7,~-3-7,~-3-6,s-3-9,~-3-8,~-2-8,s-2-10,~-2-9,s-4-2,~-3-2,~-3-3,s-4-12,~-4-11,~-4-10,~-4-9,~-4-8,~-4-7,~-4-6,~-4-5,~-4-4,~-3-4,~-3-5,s-3-14,~-3-13,~-3-12,~-3-11,~-3-10,s-4-0,~-5-0,~-6-0,~-7-0,~-8-0,~-9-0,~-10-0,~-11-0,~-12-0,~-13-0,~-14-0,~-14-1,~-14-2,s-4-3,~-5-3,~-6-3,~-7-3,~-7-4,~-7-5,s-4-13,~-5-13,~-5-12,s-4-14,~-5-14,~-6-14,~-6-13,~-6-12,~-6-11,s-13-4,~-13-3,~-13-2,~-13-1,~-12-1,~-12-2,~-11-2,~-10-2,~-9-2,~-8-2,~-7-2,~-6-2,~-5-2,s-5-4,~-6-4,~-6-5,~-5-5,~-5-6,~-5-7,s-5-8,~-5-9,~-5-10,~-5-11,s-6-6,~-7-6,~-7-7,~-6-7,s-6-8,~-7-8,~-7-9,~-6-9,s-8-11,~-8-12,~-7-12,~-7-11,~-7-10,~-6-10,s-8-1,~-7-1,s-7-13,~-8-13,~-8-14,~-7-14,s-8-10,~-8-9,~-8-8,~-8-7,~-8-6,~-8-5,~-8-4,~-8-3,~-9-3,~-9-4,s-11-1,~-10-1,~-9-1,s-9-5,~-9-6,~-9-7,~-9-8,~-9-9,~-9-10,~-9-11,s-9-12,~-9-13,~-9-14,~-10-14,s-10-3,~-10-4,~-10-5,~-10-6,~-11-6,~-11-5,~-11-4,s-11-14,~-11-13,~-11-12,~-11-11,~-11-10,~-11-9,~-11-8,~-11-7,~-10-7,~-10-8,~-10-9,~-10-10,~-10-11,~-10-12,~-10-13,s-12-4,~-12-3,~-11-3,s-13-5,~-12-5,~-12-6,~-13-6,s-13-8,~-13-7,~-12-7,~-12-8,s-12-10,~-12-9,s-12-11,~-12-12,s-14-14,~-13-14,~-12-14,~-12-13,s-13-13,~-13-12,~-13-11,~-13-10,~-13-9,s-14-13,~-14-12,~-14-11,~-14-10,~-14-9,~-14-8,~-14-7,~-14-6,~-14-5,~-14-4,~-14-3;8,4,6,10,12,6,4,5,7,6,8,12,8,9,7;5,11,4,4,4,8,11,5,11,6,10,10,5,7,11"

// 10x10
// working
var raw = "s-0-0,~-0-1,~-1-1,~-1-2,~-1-3,~-1-4,~-2-4,s-0-2,~-0-3,~-0-4,~-0-5,~-1-5,~-2-5,s-0-6,~-0-7,~-0-8,~-0-9,s-1-0,~-2-0,~-3-0,~-4-0,~-5-0,~-5-1,s-1-6,~-1-7,~-1-8,s-2-6,~-2-7,~-2-8,~-2-9,~-1-9,s-4-1,~-4-2,~-4-3,~-4-4,~-4-5,~-4-6,~-4-7,~-4-8,~-3-8,~-3-7,~-3-6,~-3-5,~-3-4,~-3-3,~-3-2,~-3-1,~-2-1,~-2-2,~-2-3,s-4-9,~-3-9,s-5-4,~-5-3,~-5-2,s-9-9,~-8-9,~-7-9,~-7-8,~-7-7,~-7-6,~-6-6,~-6-7,~-6-8,~-6-9,~-5-9,~-5-8,~-5-7,~-5-6,~-5-5,s-6-2,~-6-1,~-6-0,~-7-0,s-6-3,~-7-3,~-8-3,~-8-4,~-8-5,~-8-6,~-8-7,s-6-4,~-7-4,~-7-5,~-6-5,s-9-0,~-8-0,~-8-1,~-8-2,~-7-2,~-7-1,s-9-6,~-9-7,~-9-8,~-8-8,s-9-1,~-9-2,~-9-3,~-9-4,~-9-5;8,5,3,4,4,3,6,6,5,5;6,1,4,9,9,8,4,4,2,2"

// var raw = "s-0-1,~-0-0,s-1-7,~-1-6,~-1-5,~-1-4,~-1-3,~-1-2,~-0-2,~-0-3,~-0-4,~-0-5,~-0-6,~-0-7,~-0-8,~-0-9,~-1-9,~-2-9,~-3-9,~-4-9,~-5-9,s-1-1,~-1-0,~-2-0,~-2-1,~-2-2,~-2-3,~-2-4,s-1-8,~-2-8,~-3-8,~-4-8,~-5-8,~-6-8,~-7-8,~-8-8,s-2-7,~-2-6,~-2-5,s-3-7,~-3-6,~-3-5,~-3-4,~-3-3,~-3-2,~-3-1,~-3-0,~-4-0,~-5-0,s-5-2,~-5-1,~-4-1,~-4-2,s-4-7,~-4-6,~-4-5,~-4-4,~-4-3,~-5-3,~-5-4,~-5-5,~-6-5,~-6-4,~-6-3,~-6-2,s-5-7,~-5-6,s-7-1,~-7-0,~-6-0,~-6-1,s-6-7,~-6-6,s-9-9,~-8-9,~-7-9,~-6-9,s-7-2,~-8-2,~-9-2,~-9-3,~-8-3,~-7-3,s-8-7,~-8-6,~-8-5,~-8-4,~-7-4,~-7-5,~-7-6,~-7-7,s-9-0,~-8-0,~-8-1,~-9-1,s-9-4,~-9-5,~-9-6,~-9-7,~-9-8;6,5,5,5,6,6,4,6,5,1;1,6,6,2,6,6,4,4,6,8"

// fails
// var raw = "s-2-0,~-1-0,~-0-0,s-1-1,~-0-1,~-0-2,s-0-3,~-0-4,~-0-5,s-0-6,~-0-7,~-0-8,~-0-9,~-1-9,s-2-1,~-2-2,~-1-2,~-1-3,~-1-4,~-1-5,~-1-6,~-1-7,~-1-8,~-2-8,s-2-3,~-2-4,~-2-5,~-3-5,s-2-6,~-2-7,s-2-9,~-3-9,~-4-9,~-4-8,~-4-7,~-4-6,~-3-6,~-3-7,~-3-8,s-3-0,~-4-0,~-4-1,~-3-1,s-3-3,~-3-2,~-4-2,~-5-2,~-6-2,~-7-2,~-8-2,~-9-2,s-3-4,~-4-4,~-5-4,~-5-5,~-4-5,s-4-3,~-5-3,~-6-3,~-7-3,s-8-0,~-7-0,~-6-0,~-5-0,~-5-1,~-6-1,s-5-6,~-6-6,~-7-6,~-8-6,~-8-5,s-5-7,~-5-8,~-5-9,~-6-9,~-6-8,~-6-7,s-6-4,~-6-5,~-7-5,s-9-0,~-9-1,~-8-1,~-7-1,s-8-3,~-8-4,~-7-4,s-9-7,~-9-8,~-8-8,~-8-7,~-7-7,~-7-8,~-7-9,~-8-9,~-9-9,s-9-3,~-9-4,s-9-5,~-9-6;5,3,2,6,4,3,5,8,6,7;3,6,6,9,7,4,2,4,6,2"
// var raw = "s-3-0,~-2-0,~-1-0,~-0-0,~-0-1,~-1-1,s-0-3,~-0-2,~-1-2,~-1-3,s-3-4,~-2-4,~-1-4,~-0-4,~-0-5,~-1-5,s-2-6,~-1-6,~-0-6,~-0-7,~-1-7,~-2-7,s-0-9,~-0-8,~-1-8,~-2-8,s-2-9,~-1-9,s-5-8,~-5-7,~-5-6,~-5-5,~-5-4,~-5-3,~-5-2,~-5-1,~-5-0,~-4-0,~-4-1,~-3-1,~-2-1,~-2-2,s-3-3,~-2-3,s-3-7,~-3-6,~-3-5,~-2-5,s-4-6,~-4-5,~-4-4,~-4-3,~-4-2,~-3-2,s-4-7,~-4-8,~-3-8,s-3-9,~-4-9,~-5-9,~-6-9,~-6-8,s-9-4,~-9-3,~-8-3,~-7-3,~-7-2,~-7-1,~-7-0,~-6-0,~-6-1,s-6-3,~-6-2,s-6-5,~-6-4,~-7-4,~-7-5,s-7-6,~-6-6,~-6-7,~-7-7,~-8-7,~-9-7,s-9-8,~-8-8,~-7-8,~-7-9,s-8-0,~-9-0,~-9-1,s-8-1,~-8-2,~-9-2,s-8-6,~-8-5,~-8-4,s-9-9,~-8-9,s-9-6,~-9-5;6,5,1,3,6,3,7,7,7,4;6,6,7,6,2,2,4,6,5,5"
// var raw = "s-0-0,~-1-0,s-0-2,~-0-1,~-1-1,s-1-7,~-1-8,~-0-8,~-0-7,~-0-6,~-0-5,~-0-4,~-0-3,s-0-9,~-1-9,~-2-9,~-2-8,~-2-7,~-2-6,~-3-6,~-3-7,~-4-7,s-9-0,~-8-0,~-7-0,~-7-1,~-7-2,~-6-2,~-5-2,~-5-3,~-4-3,~-3-3,~-2-3,~-1-3,~-1-2,s-1-4,~-2-4,~-3-4,~-4-4,~-5-4,~-6-4,~-6-3,s-1-6,~-1-5,~-2-5,s-2-0,~-3-0,~-4-0,~-5-0,~-6-0,~-6-1,s-5-1,~-4-1,~-3-1,~-2-1,~-2-2,~-3-2,~-4-2,s-4-5,~-3-5,s-3-9,~-3-8,~-4-8,~-5-8,s-4-6,~-5-6,s-4-9,~-5-9,~-6-9,~-7-9,~-8-9,~-9-9,~-9-8,~-9-7,~-9-6,~-9-5,~-9-4,s-5-5,~-6-5,~-6-6,s-6-8,~-6-7,~-5-7,s-8-2,~-8-1,~-9-1,~-9-2,~-9-3,~-8-3,~-7-3,~-7-4,~-8-4,s-7-8,~-8-8,~-8-7,~-8-6,~-8-5,~-7-5,s-7-7,~-7-6;4,4,5,4,7,5,2,4,5,9;3,4,6,2,3,6,4,7,9,5"

//untested
// var raw = "s-3-0,~-2-0,~-2-1,~-1-1,~-1-0,~-0-0,~-0-1,~-0-2,~-1-2,~-1-3,~-1-4,~-1-5,s-0-3,~-0-4,~-0-5,~-0-6,~-1-6,s-1-7,~-0-7,s-0-9,~-1-9,~-1-8,~-0-8,s-3-2,~-2-2,~-2-3,s-4-7,~-3-7,~-2-7,~-2-6,~-2-5,~-2-4,~-3-4,~-3-5,~-3-6,s-8-8,~-8-9,~-7-9,~-6-9,~-5-9,~-4-9,~-3-9,~-2-9,~-2-8,~-3-8,s-7-1,~-6-1,~-5-1,~-4-1,~-3-1,s-3-3,~-4-3,~-5-3,~-5-4,s-4-0,~-5-0,~-6-0,~-7-0,~-8-0,~-9-0,s-4-2,~-5-2,~-6-2,~-7-2,~-8-2,~-8-3,~-7-3,s-6-6,~-5-6,~-4-6,~-4-5,~-4-4,s-7-5,~-7-6,~-7-7,~-7-8,~-6-8,~-5-8,~-4-8,s-5-5,~-6-5,s-6-7,~-5-7,s-8-7,~-8-6,~-8-5,~-8-4,~-7-4,~-6-4,~-6-3,s-8-1,~-9-1,~-9-2,~-9-3,~-9-4,s-9-5,~-9-6,s-9-9,~-9-8,~-9-7;6,6,6,1,2,5,7,5,6,5;7,4,5,2,5,3,3,7,7,6"

// 6x6
// works
// var raw = "s-2-1,~-2-0,~-1-0,~-0-0,~-0-1,~-1-1,~-1-2,~-1-3,s-0-2,~-0-3,~-0-4,~-1-4,~-2-4,~-3-4,~-4-4,s-2-5,~-1-5,~-0-5,s-2-2,~-2-3,s-4-2,~-4-1,~-4-0,~-3-0,~-3-1,~-3-2,~-3-3,s-3-5,~-4-5,~-5-5,~-5-4,s-5-2,~-5-3,~-4-3,s-5-1,~-5-0;5,4,3,2,2,1;5,3,2,2,3,2"
// var raw = "s-0-5,~-0-4,~-0-3,~-0-2,~-0-1,~-0-0,~-1-0,~-2-0,s-4-5,~-5-5,~-5-4,~-4-4,~-3-4,~-2-4,~-2-3,~-2-2,~-2-1,~-1-1,~-1-2,s-1-5,~-1-4,~-1-3,s-2-5,~-3-5,s-3-0,~-3-1,~-4-1,~-5-1,s-4-2,~-3-2,~-3-3,~-4-3,s-5-0,~-4-0,s-5-2,~-5-3;2,1,3,2,4,5;4,3,1,3,3,3"
// var raw = "s-3-0,~-2-0,~-1-0,~-0-0,~-0-1,~-1-1,s-2-2,~-1-2,~-0-2,~-0-3,~-1-3,~-2-3,s-1-4,~-1-5,~-0-5,~-0-4,s-4-1,~-3-1,~-2-1,s-2-4,~-3-4,~-4-4,~-4-5,~-3-5,~-2-5,s-5-1,~-5-2,~-4-2,~-3-2,~-3-3,~-4-3,~-5-3,s-5-0,~-4-0,s-5-5,~-5-4;4,4,3,1,4,1;2,3,2,5,3,2"
// var raw = "s-3-0,~-2-0,~-1-0,~-0-0,~-0-1,~-1-1,s-2-2,~-1-2,~-0-2,~-0-3,~-1-3,~-2-3,s-1-4,~-1-5,~-0-5,~-0-4,s-4-1,~-3-1,~-2-1,s-2-4,~-3-4,~-4-4,~-4-5,~-3-5,~-2-5,s-5-1,~-5-2,~-4-2,~-3-2,~-3-3,~-4-3,~-5-3,s-5-0,~-4-0,s-5-5,~-5-4;4,4,3,1,4,1;2,3,2,5,3,2"

// 4x4
//works
// var raw = "s-0-0,~-0-1,s-0-2,~-0-3,s-1-0,~-1-1,~-1-2,~-1-3,s-2-0,~-2-1,s-2-2,~-2-3,s-3-3,~-3-2,~-3-1,~-3-0;2,1,3,1;3,1,1,2"

var heads []Points

var relations []r

var N int

var targetX []int
var targetY []int

func main() {
	initData()
	m := constructMap()
	printMap(m)

	printMap(play())
}

func play() [][]*Node {
	ch := make(chan [][]*Node, len(heads))
	chCount := len(heads)
	for i, head := range heads {
		go playRountine(head, i, ch)
	}

	for gg := range ch {
		if gg != nil {
			fmt.Println("GG")
			return gg
		} else {
			chCount--
			fmt.Println("not found in this chnnel")
			fmt.Println(chCount, " channels left...")
		}
	}

	fmt.Println("not found")
	return [][]*Node{}
}

func playRountine(h Points, i int, ch chan [][]*Node) {
	m := constructMap()
	counter := -1
	nodeStack := stack.New()
	headsToCheck := []Points{}
	headsToCheck = append(headsToCheck, heads[:i]...)
	headsToCheck = append(headsToCheck, heads[i+1:]...)
	currentX := make([]int, N)
	currentY := make([]int, N)
	curr := m[h.y][h.x]
	ptr := 0
	for {
		counter++
		if curr != nil {
			eNode := exhaustNode(curr, currentY, currentX)
			if eNode != nil {
				nodeStack.Push(eNode)
			}

			if isGG(currentX, currentY) {
				ch <- m
				return
			}

			if ptr < len(headsToCheck) {
				nextHead := headsToCheck[ptr]
				curr = m[nextHead.y][nextHead.x]
				ptr++
				continue
			}
		}

		disableNode(nodeStack.Peek().(*Node), currentX, currentY)
		prev := nodeStack.Peek().(*Node).prev

		if prev != nil && slices.Index(headsToCheck, getHead(prev).Points) != len(headsToCheck)-1 {
			head := getHead(prev)
			nodeStack.Pop()
			nodeStack.Push(prev)

			ptr = slices.Index(headsToCheck, head.Points) + 1
			curr = m[headsToCheck[ptr].y][headsToCheck[ptr].x]
			continue
		}

		head := nodeStack.Pop().(*Node)
		disableNode(head, currentX, currentY)

		if nodeStack.Len() == 0 {
			break
		}
		curr = nil
	}
	ch <- nil
}

func disableNode(node *Node, currentX, currentY []int) {
	//just to be safe
	if node.active {
		currentX[node.x]--
		currentY[node.y]--
	}
	node.active = false
}

func getHead(node *Node) *Node {
	if node.prev == nil {
		return node
	}
	return getHead(node.prev)
}

func exhaustNode(node *Node, currentY, currentX []int) *Node {
	boom := isBoom(node.x, node.y, currentX, currentY)
	if boom {
		return node.prev
	} else if !node.active {
		node.active = true
		currentY[node.y]++
		currentX[node.x]++
	}
	if node.next == nil {
		return node
	}
	return exhaustNode(node.next, currentY, currentX)
}

func isGG(currentX, currentY []int) bool {
	for i := range currentX {
		if currentX[i] != targetX[i] || currentY[i] != targetY[i] {
			return false
		}
	}

	return true
}

func isBoom(indexX, indexY int, currentX, currentY []int) bool {
	if currentX[indexX] == targetX[indexX] || currentY[indexY] == targetY[indexY] {
		return true
	}
	return false
}

func printMap(gg [][]*Node) {
	//println color
	red := "\033[31m"
	reset := "\033[0m"
	fmt.Printf("     ")

	for _, val := range targetX {
		fmt.Printf(" %v  ", val)
	}

	fmt.Println()
	fmt.Print("┉┉┉┉")

	for range targetX {
		fmt.Print("┉┉┉┉")
	}
	fmt.Println("┉")

	for i, row := range gg {
		fmt.Printf("  %v ┋", targetY[i])
		for _, node := range row {
			if node != nil {
				if node.active {
					fmt.Print(red)
				}
				if node.prev != nil {
					if node.prev.y == node.y {
						fmt.Print(" ━ ")
					} else if node.prev.x == node.x {
						fmt.Print(" | ")
					}
				} else {
					fmt.Print(" o ")
				}
				if node.active {
					fmt.Print(reset)
				}
				fmt.Print("┋")
			} else {
				fmt.Print("   ┋")
			}
		}
		fmt.Println()
		for range row {
			fmt.Print("┉┉┉┉")
		}
		fmt.Print("┉┉┉┉")
		fmt.Println("┉")
	}
}

func initData() {
	pts := strings.Split(raw, ";")
	rawNodes := strings.Split(pts[0], ",")

	var prev Points
	for _, rawNode := range rawNodes {
		nodePts := strings.Split(rawNode, "-")
		y, _ := strconv.Atoi(nodePts[1])
		x, _ := strconv.Atoi(nodePts[2])

		if nodePts[0] == "s" {
			heads = append(heads, Points{y: y, x: x})
		} else {
			relations = append(relations, r{this: prev, to: Points{y: y, x: x}})
		}
		prev = Points{y: y, x: x}
	}

	//sort heads, outer heads gets lower priority in retires, idk if this is more efficient
	sort.Slice(heads[:], func(i, j int) bool {
		return cmp.Compare((heads[i].x+heads[i].y), (heads[j].x+heads[j].y)) > 0
	})

	xtargets := strings.Split(pts[1], ",")
	for _, xtarget := range xtargets {
		x, _ := strconv.Atoi(xtarget)
		targetX = append(targetX, x)
	}
	ytargets := strings.Split(pts[2], ",")
	for _, ytarget := range ytargets {
		y, _ := strconv.Atoi(ytarget)
		targetY = append(targetY, y)
	}

	N = len(targetX)
}

func constructMap() [][]*Node {
	m := make([][]*Node, N)
	for i := range m {
		m[i] = make([]*Node, N)
	}

	for _, head := range heads {
		m[head.y][head.x] = &Node{Points: head, active: false}
	}

	for _, r := range relations {
		prev := m[r.this.y][r.this.x]
		next := &Node{Points: r.to, prev: prev, active: false}
		prev.next = next
		m[r.this.y][r.this.x] = prev
		m[r.to.y][r.to.x] = next
	}

	return m
}
